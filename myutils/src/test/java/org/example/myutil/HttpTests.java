package org.example.myutil;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.node.ObjectNode;import org.example.myutil.utils.HttpClientUtils;import org.example.myutil.utils.JsonUtils;import org.junit.jupiter.api.*;import java.io.IOException;import java.io.InputStream;import java.net.http.HttpResponse;import java.nio.charset.StandardCharsets;import java.util.HashMap;import java.util.Map;import java.util.logging.Level;import java.util.logging.Logger;/** * @author hzhq1255 * @version 1.0 * @since 2022-11-27 下午5:09 */@TestMethodOrder(MethodOrderer.OrderAnnotation.class)public class HttpTests {    private static final String BASE_URL = "https://localhost:6443";    private static final Logger LOGGER = Logger.getLogger("HttpTests");    private static final String MACHINE_TOKEN = "eyJhbGciOiJSUzI1NiIsImtpZCI6IlhxZXlRZmsxclZ0SGxuRFR6OE0waEczT1VzeXdWRy1Ed0k4dmhEMlV2MmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLXo0dGNjIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5YTNmNjRiNy1kZDkzLTRiNGYtYTY0YS1kYmU2ODUzMzI1MTgiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.ZcqY0N5Eqf_-lF8sU7QlWWJgn2G02NSc4PO6MXhxz2TTUtDN2c3UTfReIaWzDhFLoRK6X32ITNMSBB6l_K-ErY8OUfzM2UCnVyfy9q_2KXo_iH4uxiMVfmFYkX2OoTN__g3z-KJsjKeSO4-_x2h1APYYqWlh4qxKf-1WVYSwPbM4AHGUrCmWbtuAuuEkoTi_AEI0v-0cBHlYtEZxNwAVc7-EGsNV8-N7bDy59S1M4c4KMAHbg0IJ-qEHlAAD7-90xrsHizHi9zQNqaNo4w49P7UrSiIqJQ3a6YyvvG-HzWU2R7-0XCMKp1dSCkYMITehATLcKeOxscHdTp7fd7wUBg";    private static final Map<String, String> AUTHORIZATION_HEADER = new HashMap<>(){{        put("Authorization", String.format("Bearer %s", MACHINE_TOKEN));    }};    @Test    @Order(1)    public void doPostYaml() throws IOException, InterruptedException {        String url = BASE_URL + "/api/v1/namespaces/default/pods";        byte[] bytes;        try (InputStream podInputStream = getClass().getResourceAsStream("/Pod.yaml")) {            bytes = podInputStream == null ? new byte[]{} : podInputStream.readAllBytes();        }        String podYaml = new String(bytes, StandardCharsets.UTF_8);        Map<String, String> headers = new HashMap<>(AUTHORIZATION_HEADER);        headers.put("content-type", "application/yaml");        HttpResponse<String> response = HttpClientUtils.doPost(url, headers, new HashMap<>() {{            put("pretty", "true");        }}, podYaml);        Assertions.assertNotEquals(null, response);        LOGGER.log(Level.INFO, String.format("response body: %s", response.body()));        Assertions.assertEquals(201, response.statusCode());        Thread.sleep(2000);    }    @Test    @Order(2)    public void doGet() throws IOException, InterruptedException {        String url = BASE_URL + "/api/v1/namespaces/default/pods/myapp";        HttpResponse<String> response = HttpClientUtils.doGet(url, AUTHORIZATION_HEADER, new HashMap<>() {{            put("pretty", "true");        }});        Assertions.assertNotEquals(null, response);        LOGGER.log(Level.INFO, String.format("response body: %s", response.body()));        Assertions.assertEquals(200, response.statusCode());        Assertions.assertTrue(JsonUtils.isJSONValid(response.body()));        Thread.sleep(2000);    }    @Test    @Order(3)    public void doPut() throws IOException, InterruptedException {        String url = BASE_URL + "/api/v1/namespaces/default/pods/myapp";        Map<String, String> headers = new HashMap<>(AUTHORIZATION_HEADER);        HttpResponse<String> getResponse = HttpClientUtils.doGet(url, headers, new HashMap<>() {{            put("pretty", "true");        }});        ObjectMapper objectMapper = new ObjectMapper();        JsonNode jsonNode = objectMapper.readTree(getResponse.body());        ObjectNode labels =  (ObjectNode) jsonNode.at("/metadata/labels");        labels.put("aaa", "ccc");        String updatePod = jsonNode.toString();        headers.put("content-type", "application/json");        HttpResponse<String> response = HttpClientUtils.doPut(url, headers, new HashMap<>() {{            put("pretty", "true");        }}, updatePod);        Assertions.assertNotEquals(null, response);        LOGGER.log(Level.INFO, String.format("response body: %s", response.body()));        jsonNode = objectMapper.readTree(response.body());        ObjectNode newLabels = (ObjectNode) jsonNode.at("/metadata/labels");        Assertions.assertEquals(200, response.statusCode());        Assertions.assertEquals("ccc", newLabels.get("aaa").asText());        Thread.sleep(2000);    }    @Test    @Order(4)    public void doDelete() throws IOException, InterruptedException {        String url = BASE_URL + "/api/v1/namespaces/default/pods/myapp";        HttpResponse<String> response = HttpClientUtils.doDelete(url, AUTHORIZATION_HEADER, new HashMap<>() {{            put("pretty", "true");        }});        Assertions.assertNotEquals(null, response);        LOGGER.log(Level.INFO, String.format("response body: %s", response.body()));        Assertions.assertEquals(200, response.statusCode());        Thread.sleep(2000);    }}